QUnit.test("fetch method", (assert) => {
  let done = assert.async();
  let result = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16"><ellipse cx="50%" cy="50%" rx="50%" ry="50%" fill="#000000"></ellipse></svg>`;

  Lib.fetch('/color/000000')
    .then((res) => {
      console.log(res);
      assert.equal(result, res, "Black color svg circle fetched correctly");
      done();
    });
});

QUnit.test("component to hex", (assert) => {
  let hexColor = Lib.componentToHex(125);
  assert.equal(hexColor, "7d", "Converting 125 to hex value");
});

QUnit.test("rgb to hex", (assert) => {
  let hexColor = Lib.rgbToCustomHex(125, 70, 12);
  assert.equal(hexColor, "7d460c", "Converting rgb to hex color");
});

QUnit.test("create Tile", (assert) => {
  let tile = new Tile();
  assert.equal(tile.el.outerHTML, "<span></span>");
});

QUnit.test("update Tile", (assert) => {
  let tile = new Tile();
  let html = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16"><ellipse cx="50%" cy="50%" rx="50%" ry="50%" fill="#000000"></ellipse></svg>`;
  tile.updateHTML(html);
  assert.equal(tile.el.innerHTML, html);
});

QUnit.test("create Mosaic", (assert) => {
  let mosaic = new Mosaic();
  assert.equal(mosaic.el.outerHTML, "<div></div>");
});

QUnit.test("update Mosaic style", (assert) => {
  let mosaic = new Mosaic();
  mosaic.updateStyle("width:720px;height:720px;");
  assert.equal(mosaic.el.style.cssText, "width: 720px; height: 720px;");
});

QUnit.test("calculate average color of tile", (assert) => {
  let imgData = {
    data: new Uint8ClampedArray("0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,64,64,4,51,51,51,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,51,51,51,5,85,85,85,6,85,85,85,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,73,73,73,7,64,64,64,8,64,64,64,8,64,64,64,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,64,64,8,57,57,57,9,57,57,57,9,57,57,57,9,64,64,64,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,2,77,77,77,10,70,70,70,11,70,70,70,11,70,70,70,11,77,77,77,10,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,2,70,70,70,11,64,64,64,12,64,64,64,12,64,64,64,12,70,70,70,11,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,2,70,70,70,11,73,73,73,14,73,73,73,14,73,73,73,14,64,64,64,12,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,77,77,77,10,64,64,64,12,73,73,73,14,68,68,68,15,73,73,73,14,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,64,64,64,8,70,70,70,11,64,64,64,12,73,73,73,14,73,73,73,14,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,73,73,73,7,57,57,57,9,70,70,70,11,64,64,64,12,64,64,64,12,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,51,51,51,5,64,64,64,8,57,57,57,9,70,70,70,11,70,70,70,11,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,4,85,85,85,6,64,64,64,8,57,57,57,9,77,77,77,10,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,3,51,51,51,5,85,85,85,6,64,64,64,8,64,64,64,8,128,128,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0".split(",")),
    height: 16,
    width: 16
  };

  let r, g, b;
  [r, g, b] = Lib.averageColor(imgData);
  let hexColor = Lib.rgbToCustomHex(Math.floor(r), Math.floor(g), Math.floor(b))
  assert.equal(hexColor, "151515", "single tile of 16x16 data converted to hex correctly");
});